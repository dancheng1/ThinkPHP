<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ky.workover.boreturn.mapper.BoreturnDetailMapper" >
  <resultMap id="BaseResultMap" type="com.ky.workover.boreturn.model.BoreturnDetail" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="borrow_id" property="borrowId" jdbcType="INTEGER" />
    <result column="corp_id" property="corpId" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="note" property="note" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, borrow_id, corp_id, type, note
  </sql>
  <select id="findListByBorrowId" resultMap="BaseResultMap" parameterType="java.lang.String">
    SELECT * FROM boreturn_detail WHERE borrow_id = #{value}
  </select>
  <select id="findListByCorpId" resultMap="BaseResultMap" parameterType="java.lang.String">
    SELECT * FROM boreturn_detail WHERE corp_id LIKE '%${value}%'
  </select>
  <select id="findAll" resultMap="BaseResultMap">
    SELECT * FROM boreturn_detail
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from boreturn_detail
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from boreturn_detail
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ky.workover.boreturn.model.BoreturnDetail" >
    insert into boreturn_detail (id, borrow_id, corp_id, 
      type, note)
    values (#{id,jdbcType=INTEGER}, #{borrowId,jdbcType=INTEGER}, #{corpId,jdbcType=INTEGER}, 
      #{type,jdbcType=INTEGER}, #{note,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.ky.workover.boreturn.model.BoreturnDetail" >
    insert into boreturn_detail
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="borrowId != null" >
        borrow_id,
      </if>
      <if test="corpId != null" >
        corp_id,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="note != null" >
        note,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="borrowId != null" >
        #{borrowId,jdbcType=INTEGER},
      </if>
      <if test="corpId != null" >
        #{corpId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ky.workover.boreturn.model.BoreturnDetail" >
    update boreturn_detail
    <set >
      <if test="borrowId != null" >
        borrow_id = #{borrowId,jdbcType=INTEGER},
      </if>
      <if test="corpId != null" >
        corp_id = #{corpId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="note != null" >
        note = #{note,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ky.workover.boreturn.model.BoreturnDetail" >
    update boreturn_detail
    set borrow_id = #{borrowId,jdbcType=INTEGER},
      corp_id = #{corpId,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      note = #{note,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>